import streamlit as st

TEXTS = {
    "en": {
        # General App Texts
        "app_icon": "‚õèÔ∏è",
        "app_title": "Geochemical Rock Classifier",
        "main_menu_title": "Main Menu",
        "select_page_label": "Select Page",
        "language_label": "Language",

        # Page Titles (for selectbox and potentially for page headers)
        "page_home": "Home",
        "page_data_analysis": "Exploratory Data Analysis",
        "page_run_prediction": "Run Prediction",
        "page_performance_visualizer": "Performance Visualizer",
        "page_model_insights": "Model Insights",
        "page_help_about": "Help / About",
        

        # Home.py Texts
        "home_title": "Geochemical Rock Classifier", # Can be same as app_title or more specific
        "home_subtitle": "Intelligently analyze geochemical data to accurately predict porphyry ore types.",
        "home_intro": """
            This tool utilizes advanced machine learning models, based on 36 major and trace element
            geochemical data from rock samples, to help you quickly distinguish between
            **Copper-rich (Cu-rich)** and **Gold-rich (Au-rich)** porphyry samples.
        """,
        "home_core_features_header": "Core Features:",
        "home_core_feature_1": "**Upload & Predict**: Easily upload your data, select a model, and get instant classification results.",
        "home_core_feature_2": "**Performance Visualization**: If true labels are provided, intuitively assess model performance on your data.",
        "home_core_feature_3": "**Model Insights**: Understand how the model makes decisions and which elemental features are most critical.",
        "home_quick_start_header": "Quick Start",
        "home_button_run_prediction": "üöÄ Run Prediction",
        "home_help_run_prediction": "Upload data and run the model for prediction",
        "home_button_view_performance": "üìà View Performance",
        "home_help_view_performance": "Visualize model performance on labeled data",
        "home_button_model_insights": "üí° Model Insights",
        "home_help_model_insights": "Explore model feature importance and interpretability",
        "home_app_overview_header": "Application Overview",
        "home_app_overview_p1": """
            In geological exploration, rapid and accurate identification of deposit types is crucial
            for subsequent resource assessment and development. This project aims to build an
            end-to-end machine learning workflow to:
        """,
        "home_app_overview_li1": "Automatically classify unseen porphyry samples as **Cu-rich** or **Au-rich**.",
        "home_app_overview_li2": "Interpret the key geochemical signatures controlling the classification.",
        "home_app_overview_li3": "Provide a user-friendly offline prediction tool.",
        "home_app_overview_p2": """
            We utilize a dataset of 445 porphyry samples (298 Cu-rich, 147 Au-rich) with 36
            geochemical elemental features (major elements in wt%, trace elements in ppm)
            for model training and evaluation.
        """,
        "home_further_assistance_info": "For detailed usage instructions, feature definitions, model information, and technical details, please visit the **‚ùì Help / About** page.",
        "home_image_caption": "Porphyry Deposit Illustration",

        # data_analysis.py
        "data_analysis_title": "Exploratory Data Analysis (EDA)",
        "data_analysis_intro": """
        This section presents key visualizations from the exploratory data analysis performed on the 
        **training dataset**. These plots help in understanding data distributions, relationships 
        between elements, and overall data structure before model training.
        """,
        "data_analysis_training_data_notice": "Note: All visualizations in this section are based on the pre-analyzed training data.",
        "data_analysis_image_missing": "Image '{image_name}' not found in 'assets/eda_plots/'. Please ensure it is correctly placed.",
        "data_analysis_scatter_matrix_header": "1. Pair-wise Scatter Matrix (Key Elements)",
        "data_analysis_scatter_matrix_desc": """
        Shows pairwise relationships for a selection of 10 key elements. 
        Diagonal plots show the distribution of each element.
        """,
        "data_analysis_scatter_matrix_caption": "Pair-wise scatter matrix of 10 key elements from the training data.",
        "data_analysis_corr_heatmap_header": "2. Correlation Heatmap",
        "data_analysis_corr_heatmap_desc": """
        Visualizes the Pearson or Spearman correlation coefficients between all elemental features in the training data. 
        Helps identify highly correlated variables.
        """,
        "data_analysis_corr_heatmap_caption": "Correlation heatmap of elemental features from the training data.",
        "data_analysis_pca_biplot_header": "3. PCA Bi-plot (PC1 vs PC2)",
        "data_analysis_pca_biplot_desc": """
        Principal Component Analysis (PCA) bi-plot showing samples (colored by class: Cu-rich/Au-rich) 
        and original feature vectors in the space of the first two principal components, based on training data.
        """,
        "data_analysis_pca_biplot_caption": "PCA bi-plot (PC1 vs PC2) colored by class, from the training data.",
        "data_analysis_geochem_ratios_header": "4. Classic Geochemical Ratio Diagrams",
        "data_analysis_geochem_ratio1_desc": "**K‚ÇÇO/Na‚ÇÇO vs SiO‚ÇÇ Diagram (Training Data):**",
        "data_analysis_geochem_ratio1_caption": "K‚ÇÇO/Na‚ÇÇO vs SiO‚ÇÇ diagram for training samples.",
        "data_analysis_geochem_ratio2_desc": "**Sr/Y vs Y Diagram (Training Data):**",
        "data_analysis_geochem_ratio2_caption": "Sr/Y vs Y diagram for training samples.",
        "data_analysis_plot_quality_notice": """
        All plots are generated with consistent fonts & color palettes and aim for a resolution of ‚â• 300 dpi. 
        Each figure includes a title, axis labels, and a legend where applicable.
        """,


        # run_prediction.py
        "run_pred_title": "Run Prediction on New Data",
        "controls_header": "Controls",
        "run_pred_page_intro": "Upload your geochemical data, select a model, and get predictions for Cu-rich or Au-rich samples.",
        "run_pred_upload_header": "1. Upload Your Data",
        "run_pred_upload_label_sidebar": "Upload an Excel (.xlsx) or CSV (.csv) file:",
        "run_pred_model_header": "2. Select Model",
        "run_pred_model_label_sidebar": "Choose a pre-trained model:",
        "run_pred_error_model_load_sidebar": "Model {model_name} could not be loaded.",
        "run_pred_success_model_ready_sidebar": "{model_name} model ready.",
        "run_pred_awaiting_upload": "Awaiting data file upload in the sidebar...",
        "run_pred_error_loading_data": "Failed to load data from the uploaded file.",
        "run_pred_true_label_header": "3. (Optional) Specify True Label Column",
        "run_pred_true_label_checkbox": "My data includes a column with true labels for performance evaluation.",
        "run_pred_true_label_select": "Select the column containing true labels:",
        "run_pred_true_label_none": "None (Proceed without performance evaluation)",
        "run_pred_true_label_help": "This column will be used for performance metrics if available.", 
        "run_pred_warning_no_label_col": "Could not identify a potential label column.", 
        "run_pred_validation_header": "2. Data Validation & Preprocessing", 
        "run_pred_error_validation_failed": "Validation failed: {message}", 
        "run_pred_success_validation": "{message}", 
        "run_pred_spinner_preprocessing": "Preprocessing data...", 
        "run_pred_success_preprocessing_done": "Data preprocessed successfully for prediction.", 
        "run_pred_expander_processed_data": "View Processed Data (First 5 Rows)", 
        "run_pred_run_prediction_header": "3. Run Prediction", 
        "run_pred_submit_button_main": "Predict using {model_name}", 
        "run_pred_input_data_header": "Uploaded Data Preview (First 5 Rows):",
        "run_pred_no_data_warning": "Please upload a data file to proceed.",
        "run_pred_processing_spinner": "Processing data and making predictions...",
        "results_col_predicted_class": "Predicted Class", 
        "results_col_probability_cu_rich": "Prediction Probability ({class_name_cu_rich})", 
        "run_pred_summary_cu_label": "Predicted {class_name_cu_rich} Samples", 
        "run_pred_summary_au_label": "Predicted {class_name_au_rich} Samples",
        "run_pred_success_prediction_done": "Predictions complete! Results are shown above and can be downloaded.", 
        "run_pred_error_prediction_failed_internal": "Prediction process failed internally. Model might not be compatible or data issue.", 
        "run_pred_error_runtime_prediction": "An error occurred during prediction: {error_message}", 
        "run_pred_error_unexpected": "An unexpected error occurred: {error_message}", 
        "run_pred_error_preprocessing_failed": "Data preprocessing failed. Check data compatibility.", 
        "run_pred_results_header": "Prediction Results",
        "run_pred_download_button": "Download Predictions as CSV",
        "run_pred_summary_header": "Prediction Summary:",
        "run_pred_summary_cu": "Predicted Cu-rich samples:",
        "run_pred_summary_au": "Predicted Au-rich samples:",
        "run_pred_error_preprocessor_load": "Critical error: Preprocessor could not be loaded. Predictions cannot proceed.",
        "run_pred_error_file_processing": "Error processing the uploaded file. Please ensure it's a valid CSV or Excel file.",
        "run_pred_error_missing_columns": "Error: The uploaded data is missing one or more required columns. Please check the 'Help / About' page for the list of required features.",
        "run_pred_error_prediction": "An error occurred during prediction.",
        "run_pred_success": "Prediction successful!",

        # performance_visualizer.py
        "perf_viz_title": "Model Performance Visualizer",
        "perf_viz_no_predictions_warning": "No predictions found. Please run predictions on the 'Run Prediction' page first.",
        "perf_viz_no_true_label_info": "To visualize performance, please ensure you uploaded a file with a 'True Label' column and selected it on the 'Run Prediction' page.",
        "perf_viz_raw_data_missing_error": "Original data with labels is missing from session. Please re-run prediction with true labels specified.",
        "perf_viz_true_label_not_found_error": "The specified true label column '{true_label_col}' was not found in the uploaded data.",
        "perf_viz_class_names_error": "CLASS_NAMES configuration is invalid for binary classification visualization.",
        "perf_viz_label_mapping_error": "Some true labels ({unmapped_labels}) in column '{true_label_col}' could not be mapped. Ensure labels are one of {class_names_list}.",
        "perf_viz_true_label_mapping_key_error": "Error mapping true labels. Ensure labels in column '{true_label_col}' are one of {class_names_list}.",
        "perf_viz_predicted_class_col_missing": "'{col_name}' column not found in prediction results.",
        "perf_viz_probability_col_missing": "'{col_name}' column not found in prediction results.",
        "perf_viz_pred_label_processing_error": "Error processing predicted classes for performance metrics.",
        "perf_viz_metrics_subheader": "Performance Metrics",
        "perf_viz_accuracy_label": "Accuracy",
        "perf_viz_precision_label": "Precision ({class_name})",
        "perf_viz_recall_label": "Recall ({class_name})",
        "perf_viz_f1_label": "F1-Score ({class_name})",
        "perf_viz_visualizations_subheader": "Visualizations",
        "perf_viz_cm_tab": "Confusion Matrix",
        "perf_viz_roc_tab": "ROC Curve",
        "perf_viz_pr_tab": "Precision-Recall Curve",
        "perf_viz_cm_title_markdown": "#### Confusion Matrix",
        "perf_viz_cm_caption": """
            Shows the performance of the classification model.
            Rows represent the actual classes, and columns represent the predicted classes.
            - **{class_name_1}**: Copper-dominant porphyry samples.
            - **{class_name_0}**: Gold-dominant porphyry samples.
        """,
        "perf_viz_roc_title_markdown": "#### ROC Curve",
        "perf_viz_selected_model_placeholder": "Selected Model",
        "perf_viz_roc_caption": """
            The Receiver Operating Characteristic (ROC) curve illustrates the diagnostic ability of the classifier
            as its discrimination threshold is varied. The Area Under the Curve (AUC) measures the
            entire two-dimensional area underneath the entire ROC curve from (0,0) to (1,1).
            A model with 100% accuracy has an AUC of 1.0.
        """,
        "perf_viz_pr_title_markdown": "#### Precision-Recall Curve",
        "perf_viz_pr_caption": """
            The Precision-Recall curve shows the tradeoff between precision and recall for different thresholds.
            A high area under the curve represents both high recall and high precision.
            AP (Average Precision) summarizes this curve.
        """,

        # model_insights.py
        "model_insights_title": "Model Interpretability Insights",
        "model_insights_intro": """
        This section provides insights into what features the models consider important.
        Due to computational constraints in a live app, SHAP plots are typically shown as
        pre-generated static images from the model training phase. Feature importances for
        tree-based models and linear SVM are generated based on the selected pre-trained model.
        """,
        "model_insights_model_select_label": "Select a model to view insights:",
        "model_insights_subheader_for_model": "Insights for: {model_name}",
        "model_insights_fi_header": "#### Feature Importances",
        "model_insights_fi_warning_feature_names": "Could not reliably determine transformed feature names; using original. Error: {error_message}",
        "model_insights_fi_plot_caption": "Bar chart showing the relative importance of features for the selected model. Higher scores indicate greater influence.",
        "model_insights_fi_plot_error": "Feature importances could not be plotted for this model type/configuration.",
        "model_insights_fi_svm_info": "Feature importances for SVM are typically shown for linear kernels via coefficients.",
        "model_insights_fi_unavailable_info": "Feature importances are not directly available or easily extractable for {model_name} in this app.",
        "model_insights_fi_load_warning": "Could not load model or preprocessor for {model_name} to show feature importances.",
        "model_insights_fi_dnn_info": "Feature importances for Deep Neural Networks are complex and often explored using techniques like SHAP, which are presented as static plots here based on training data.",
        "model_insights_shap_summary_header": "#### SHAP Summary Plot (Example from Training)",
        "model_insights_shap_summary_desc": """
        SHAP (SHapley Additive exPlanations) values interpret the impact of each feature on individual predictions.
        The summary plot below is an example from the model's training phase, showing feature importance
        and the distribution of SHAP values for each feature.
        """,
        "model_insights_shap_summary_caption": "SHAP Summary Plot for {model_name} (from training data).",
        "model_insights_shap_image_load_warning": "Could not load SHAP {image_type} image: {error_message}",
        "model_insights_shap_image_not_found": "No pre-generated SHAP {image_type} plot found for {model_name} at '{image_path}'.",
        "model_insights_shap_dependence_header": "#### SHAP Dependence Plots (Examples from Training)",
        "model_insights_shap_dependence_desc": """
        SHAP dependence plots show how a single feature's value affects the SHAP value (and thus the prediction),
        potentially highlighting interactions with another feature. These are examples from the training phase.
        """,
        "model_insights_shap_dependence_caption": "SHAP Dependence Plot for {feature_name} ({model_name}, from training).",
        "model_insights_shap_dependence_config_missing": "Configuration for SHAP dependence plots not available for {model_name}.",
        "model_insights_geological_meaning_header": "Geological Meaning of Influential Variables (Discussion)",
        "model_insights_geological_meaning_desc": """
        *(This section should be filled with your discussion of the 5-10 most influential variables
        and their geological meaning, based on your project's interpretability analysis.)*

        For example:
        * **SiO‚ÇÇ (Silica):** Higher silica content often correlates with more felsic magmas, which can be associated with certain types of porphyry deposits...
        * **Cu/Au Ratio (if engineered):** This directly informs the classification...
        * **K‚ÇÇO/Na‚ÇÇO:** Indicates alkalinity, which plays a role in magma evolution and mineralization...
        * **Sr/Y Ratio:** Can be an indicator of slab melt involvement or crustal thickness...
        """,


        # help_about.py
       "help_about_title": "Help / About This Tool",
        "help_about_usage_header": "Usage Instructions",
        "help_about_usage_content": """
    1.  **Navigate to 'Run Prediction'**: Use the sidebar to go to the prediction page.
    2.  **Upload Data**:
        * Click 'Browse files' to upload your sample data.
        * The file must be in `.csv` or `.xlsx` format.
        * Ensure your data contains the 36 required geochemical features (see 'Feature Descriptions' below). Column names should match.
        * A `sample_data.csv` file is available in the `assets/` directory of the project for reference.
    3.  **Select Model**: Choose one of the pre-trained models (Random Forest, XGBoost, SVM, DNN-Keras) from the sidebar.
    4.  **Run Prediction**:
        * If your data includes a column with true labels (e.g., 'Actual_Class'), you can check the box "My data includes a 'True Label' column..." and select that column. This enables performance visualization.
        * Click the 'Predict using [Selected Model]' button.
    5.  **View Results**: Predictions and probabilities will be displayed in a table. You can download these results as a CSV file.
    6.  **Visualize Performance (Optional)**: If you provided a true label column, navigate to the 'Performance Visualizer' page to see the confusion matrix and ROC curve for the predictions made.
    7.  **Explore Model Insights**: Navigate to 'Model Insights' to see feature importances (for some models) and example SHAP plots (static images from training).
    """,
        "help_about_features_header": "Feature Descriptions (Input Data Requirements)",
        "help_about_features_content": """
    Your input data must contain the following 36 major- and trace-element features:
    * **Major Elements (wt %):** SiO‚ÇÇ, TiO‚ÇÇ, Al‚ÇÇO‚ÇÉ, TFe‚ÇÇO‚ÇÉ, MnO, MgO, CaO, Na‚ÇÇO, K‚ÇÇO, P‚ÇÇO‚ÇÖ
    * **Trace Elements (ppm):** Rb, Sr, Y, Zr, Nb, Ba, La, Ce, Pr, Nd, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, Th, U
    * Missing values in these features will be imputed with zero before further processing (as per project CLR handling).
    """,
        "help_about_model_info_header": "Model Information",
        "help_about_model_info_content": """
    This tool uses four types of pre-trained machine learning models:
    * **Random Forest:** An ensemble learning method using multiple decision trees.
    * **XGBoost:** A gradient boosting framework, known for high performance.
    * **SVM (Support Vector Machine):** A classifier that finds an optimal hyperplane to separate classes.
    * **DNN-Keras:** A Deep Neural Network built using the Keras API.
    Each model was trained on the "2025-Project-Data.xlsx" dataset.
    """,
        "help_about_tech_stack_header": "Library Versions & Tech Stack",
        "help_about_tech_stack_intro": "This application was built using Python and relies on several key libraries:",
        "help_about_tech_stack_caption": "To get exact versions, you can typically use `pip freeze > requirements.txt` in your project's virtual environment and list key ones here.",
        "help_about_project_ack_header": "Project & Acknowledgements",
        "help_about_project_ack_content": """
    * This tool was developed as part of the COMMON TOOLS FOR DATA SCIENCE final project.
    * **Team:** [Your Team Name or Group Number: e.g., 2025GXX-ProjectName]
        * [Team Member 1]
        * [Team Member 2]
        * [Team Member 3]
        * [Team Member 4 (and 5 if applicable)]
    * **Dataset:** "2025-Project-Data.xlsx" (provided for the course).
    * **Inspiration for GUI Structure:** `rascore.streamlit.app` by Mitch Parker.
    """,
        "help_about_contact_info": "For issues or questions, please refer to the project documentation or contact the development team.",
    
    # core/data_handler.py messages
        "data_handler_unsupported_file_type": "Unsupported file type. Please upload a CSV or Excel file.",
        "data_handler_error_loading_data": "Error loading data: {error_message}",
        "data_handler_validation_no_data": "No data loaded for validation.",
        "data_handler_validation_missing_cols": "Missing required columns: {missing_cols_list}. Please ensure your file contains all 36 features.",
        "data_handler_validation_non_numeric": "Column '{column_name}' contains non-numeric data that could not be converted. Please clean your data.",
        "data_handler_validation_success": "Data validation successful. Features ready for preprocessing.",
        "data_handler_error_preprocessing": "Error during data preprocessing: {error_message}",

    # core/model_loader.py messages
        "model_loader_file_not_found": "Model file for {model_name} not found at {file_path}. Please ensure models are correctly placed.",
        "model_loader_dnn_not_implemented": "DNN-Keras model loading is not yet fully implemented in model_loader.py.",
        "model_loader_invalid_model_name": "Invalid model name selected: {model_name}.",
        "model_loader_success_model_load": "{model_name} model loaded successfully.", 
        "model_loader_error_loading_model": "Error loading {model_name} model: {error_message}",
        "model_loader_preprocessor_not_found": "Preprocessor file not found at {file_path}. This is critical for predictions.",
        "model_loader_success_preprocessor_load": "Preprocessor loaded successfully.", 
        "model_loader_error_loading_preprocessor": "Error loading preprocessor: {error_message}„ÄÇ",

    # core/predictor.py messages
        "predictor_unknown_model_type": "Unknown model type for prediction: {model_name}.",
        "predictor_dnn_invalid_model_type": "DNN-Keras model is not a valid Keras model instance.", 

    # core/visualizer.py messages (plot labels and titles)
        "viz_font_warning": "Chinese characters in plots might not display correctly. Ensure a suitable font (e.g., SimHei) is installed.",
        "viz_cm_title": "Confusion Matrix",
        "viz_cm_xlabel": "Predicted Label",
        "viz_cm_ylabel": "True Label",
        "viz_roc_label": "ROC curve (AUC = {auc_score})",
        "viz_roc_xlabel": "False Positive Rate",
        "viz_roc_ylabel": "True Positive Rate",
        "viz_roc_title": "Receiver Operating Characteristic (ROC) - {model_name}",
        "viz_pr_label": "PR curve (AP = {ap_score})",
        "viz_pr_xlabel": "Recall",
        "viz_pr_ylabel": "Precision",
        "viz_pr_title": "Precision-Recall Curve - {model_name}",
        "viz_fi_title": "Top {n_features} Feature Importances - {model_name}",
        "viz_fi_xlabel": "Importance Score",
        "viz_fi_ylabel": "Features"
    },



    "zh": {
        # General App Texts
        "app_icon": "‚õèÔ∏è",
        "app_title": "Âú∞ÁêÉÂåñÂ≠¶Â≤©Áü≥ÂàÜÁ±ªÂô®",
        "main_menu_title": "‰∏ªËèúÂçï",
        "select_page_label": "ÈÄâÊã©È°µÈù¢",
        "language_label": "ËØ≠Ë®Ä",

        # Page Titles
        "page_home": "È¶ñÈ°µ",
        "page_data_analysis": "Êé¢Á¥¢ÊÄßÊï∞ÊçÆÂàÜÊûê",
        "page_run_prediction": "ÊâßË°åÈ¢ÑÊµã",
        "page_performance_visualizer": "ÊÄßËÉΩÂèØËßÜÂåñ",
        "page_model_insights": "Ê®°ÂûãÊ¥ûÂØü",
        "page_help_about": "Â∏ÆÂä©/ÂÖ≥‰∫é",

        # Home.py Texts
        "home_title": "Âú∞ÁêÉÂåñÂ≠¶Â≤©Áü≥ÂàÜÁ±ªÂô®",
        "home_subtitle": "Êô∫ËÉΩÂàÜÊûêÂú∞ÁêÉÂåñÂ≠¶Êï∞ÊçÆÔºåÁ≤æÂáÜÈ¢ÑÊµãÊñëÂ≤©ÁüøÁü≥Á±ªÂûã„ÄÇ",
        "home_intro": """
            Êú¨Â∑•ÂÖ∑Âà©Áî®ÂÖàËøõÁöÑÊú∫Âô®Â≠¶‰π†Ê®°ÂûãÔºåÊ†πÊçÆÂ≤©Áü≥Ê†∑Êú¨ÁöÑ36Áßç‰∏ªÈáèÂíåÂæÆÈáèÂÖÉÁ¥†Âú∞ÁêÉÂåñÂ≠¶Êï∞ÊçÆÔºå
            Â∏ÆÂä©ÊÇ®Âø´ÈÄüÂå∫ÂàÜ**ÂØåÈìú (Cu-rich)** Âíå **ÂØåÈáë (Au-rich)** ÊñëÂ≤©Ê†∑ÂìÅ„ÄÇ
        """,
        "home_core_features_header": "Ê†∏ÂøÉÂäüËÉΩ:",
        "home_core_feature_1": "**‰∏ä‰º†‰∏éÈ¢ÑÊµã**: ËΩªÊùæ‰∏ä‰º†ÊÇ®ÁöÑÊï∞ÊçÆÔºåÈÄâÊã©Ê®°ÂûãÂπ∂Ëé∑ÂèñÂç≥Êó∂ÂàÜÁ±ªÁªìÊûú„ÄÇ",
        "home_core_feature_2": "**ÊÄßËÉΩÂèØËßÜÂåñ**: Ëã•Êèê‰æõÁúüÂÆûÊ†áÁ≠æÔºåÂèØÁõ¥ËßÇËØÑ‰º∞Ê®°ÂûãÂú®ÊÇ®Êï∞ÊçÆ‰∏äÁöÑË°®Áé∞„ÄÇ",
        "home_core_feature_3": "**Ê®°ÂûãÊ¥ûÂØü**: ‰∫ÜËß£Ê®°ÂûãÂ¶Ç‰ΩïÂÅöÂá∫ÂÜ≥Á≠ñÔºåÂì™‰∫õÂÖÉÁ¥†ÁâπÂæÅÊúÄ‰∏∫ÂÖ≥ÈîÆ„ÄÇ",
        "home_quick_start_header": "Âø´ÈÄüÂºÄÂßã",
        "home_button_run_prediction": "üöÄ ÊâßË°åÈ¢ÑÊµã",
        "home_help_run_prediction": "‰∏ä‰º†Êï∞ÊçÆÂπ∂ËøêË°åÊ®°ÂûãËøõË°åÈ¢ÑÊµã",
        "home_button_view_performance": "üìà Êü•ÁúãÊÄßËÉΩ",
        "home_help_view_performance": "ÂèØËßÜÂåñÊ®°ÂûãÂú®Â∏¶Ê†áÁ≠æÊï∞ÊçÆ‰∏äÁöÑÊÄßËÉΩ",
        "home_button_model_insights": "üí° Ê®°ÂûãÊ¥ûÂØü",
        "home_help_model_insights": "Êé¢Á¥¢Ê®°ÂûãÁâπÂæÅÈáçË¶ÅÊÄßÂíåÂèØËß£ÈáäÊÄß",
        "home_app_overview_header": "Â∫îÁî®ÁÆÄ‰ªã",
        "home_app_overview_p1": """
            Âú∞Ë¥®ÂãòÊé¢‰∏≠ÔºåÂø´ÈÄüÂáÜÁ°ÆÂú∞ËØÜÂà´ÁüøÂ∫äÁ±ªÂûãÂØπ‰∫éÂêéÁª≠ÁöÑËµÑÊ∫êËØÑ‰º∞ÂíåÂºÄÂèëËá≥ÂÖ≥ÈáçË¶Å„ÄÇ
            Êú¨È°πÁõÆÊó®Âú®ÊûÑÂª∫‰∏Ä‰∏™Á´ØÂà∞Á´ØÁöÑÊú∫Âô®Â≠¶‰π†Â∑•‰ΩúÊµÅÁ®ãÔºåÂÆûÁé∞Ôºö
        """,
        "home_app_overview_li1": "ÂØπÊú™ËßÅËøáÁöÑÊñëÂ≤©Ê†∑Êú¨ËøõË°å **ÂØåÈìú (Cu-rich)** Êàñ **ÂØåÈáë (Au-rich)** ÁöÑËá™Âä®ÂàÜÁ±ª„ÄÇ",
        "home_app_overview_li2": "Ëß£ËØªÊéßÂà∂ÂàÜÁ±ªÁªìÊûúÁöÑÂÖ≥ÈîÆÂú∞ÁêÉÂåñÂ≠¶ÁâπÂæÅ„ÄÇ",
        "home_app_overview_li3": "Êèê‰æõ‰∏Ä‰∏™Áî®Êà∑ÂèãÂ•ΩÁöÑÁ¶ªÁ∫øÈ¢ÑÊµãÂ∑•ÂÖ∑„ÄÇ",
        "home_app_overview_p2": """
            Êàë‰ª¨Âà©Áî®ÂåÖÂê´445‰∏™ÊñëÂ≤©Ê†∑Êú¨Ôºà298‰∏™ÂØåÈìúÔºå147‰∏™ÂØåÈáëÔºâÂíå36‰∏™Âú∞ÁêÉÂåñÂ≠¶ÂÖÉÁ¥†Ôºà‰∏ªÈáèÂÖÉÁ¥†wt%ÔºåÂæÆÈáèÂÖÉÁ¥†ppmÔºâÁöÑÊï∞ÊçÆÈõÜËøõË°åÊ®°ÂûãËÆ≠ÁªÉ‰∏éËØÑ‰º∞„ÄÇ
        """,
        "home_further_assistance_info": "ÊúâÂÖ≥ËØ¶ÁªÜÁöÑ‰ΩøÁî®ËØ¥Êòé„ÄÅÁâπÂæÅÂÆö‰πâ„ÄÅÊ®°Âûã‰ø°ÊÅØÂíåÊäÄÊúØÁªÜËäÇÔºåËØ∑ËÆøÈóÆ **‚ùì Help / About** È°µÈù¢„ÄÇ",
        "home_image_caption": "ÊñëÂ≤©ÁüøÂ∫äÂõæÁ§∫",

        # data_analysis.py
        "data_analysis_title": "Êé¢Á¥¢ÊÄßÊï∞ÊçÆÂàÜÊûê (EDA)",
        "data_analysis_intro": """
        Êú¨ÈÉ®ÂàÜÂ±ïÁ§∫‰∫ÜÂØπ**ËÆ≠ÁªÉÊï∞ÊçÆÈõÜ**ËøõË°åÁöÑÊé¢Á¥¢ÊÄßÊï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑÂÖ≥ÈîÆÂèØËßÜÂåñÂõæË°®„ÄÇ
        Ëøô‰∫õÂõæË°®ÊúâÂä©‰∫éÂú®Ê®°ÂûãËÆ≠ÁªÉÂâç‰∫ÜËß£Êï∞ÊçÆÂàÜÂ∏É„ÄÅÂÖÉÁ¥†Èó¥ÁöÑÂÖ≥Á≥ª‰ª•ÂèäÊï¥‰ΩìÊï∞ÊçÆÁªìÊûÑ„ÄÇ
        """,
        "data_analysis_training_data_notice": "Ê≥®ÊÑèÔºöÊú¨ÈÉ®ÂàÜÊâÄÊúâÂèØËßÜÂåñÂùáÂü∫‰∫éÈ¢ÑÂÖàÂàÜÊûêÁöÑËÆ≠ÁªÉÊï∞ÊçÆ„ÄÇ",
        "data_analysis_image_missing": "ÂõæÁâá '{image_name}' Âú® 'assets/eda_plots/' ‰∏≠Êú™ÊâæÂà∞„ÄÇËØ∑Á°Æ‰øùÂÖ∂Â∑≤Ê≠£Á°ÆÊîæÁΩÆ„ÄÇ",
        "data_analysis_scatter_matrix_header": "1. ÊàêÂØπÊï£ÁÇπÁü©Èòµ (ÂÖ≥ÈîÆÂÖÉÁ¥†)",
        "data_analysis_scatter_matrix_desc": """
        ÊòæÁ§∫10‰∏™ÂÖ≥ÈîÆÂÖÉÁ¥†ÁöÑÊàêÂØπÂÖ≥Á≥ª„ÄÇÂØπËßíÁ∫øÂõæÊòæÁ§∫ÊØè‰∏™ÂÖÉÁ¥†ÁöÑÂàÜÂ∏É„ÄÇ
        """,
        "data_analysis_scatter_matrix_caption": "ËÆ≠ÁªÉÊï∞ÊçÆ‰∏≠10‰∏™ÂÖ≥ÈîÆÂÖÉÁ¥†ÁöÑÊàêÂØπÊï£ÁÇπÁü©Èòµ„ÄÇ",
        "data_analysis_corr_heatmap_header": "2. Áõ∏ÂÖ≥ÊÄßÁÉ≠Âõæ",
        "data_analysis_corr_heatmap_desc": """
        ÂèØËßÜÂåñËÆ≠ÁªÉÊï∞ÊçÆ‰∏≠ÊâÄÊúâÂÖÉÁ¥†ÁâπÂæÅ‰πãÈó¥ÁöÑÁöÆÂ∞îÈÄäÊàñÊñØÁöÆÂ∞îÊõºÁõ∏ÂÖ≥Á≥ªÊï∞„ÄÇ
        ÊúâÂä©‰∫éËØÜÂà´È´òÂ∫¶Áõ∏ÂÖ≥ÁöÑÂèòÈáè„ÄÇ
        """,
        "data_analysis_corr_heatmap_caption": "ËÆ≠ÁªÉÊï∞ÊçÆ‰∏≠ÂÖÉÁ¥†ÁâπÂæÅÁöÑÁõ∏ÂÖ≥ÊÄßÁÉ≠Âõæ„ÄÇ",
        "data_analysis_pca_biplot_header": "3. PCA ÂèåÊ†áÂõæ (PC1 vs PC2)",
        "data_analysis_pca_biplot_desc": """
        ‰∏ªÊàêÂàÜÂàÜÊûê (PCA) ÂèåÊ†áÂõæÔºåÊòæÁ§∫Ê†∑Êú¨ÔºàÊåâÁ±ªÂà´ÁùÄËâ≤ÔºöÂØåÈìú/ÂØåÈáëÔºâÂíåÂéüÂßãÁâπÂæÅÂêëÈáè
        Âú®Ââç‰∏§‰∏™‰∏ªÊàêÂàÜÁ©∫Èó¥‰∏≠ÁöÑÂàÜÂ∏ÉÔºåÂü∫‰∫éËÆ≠ÁªÉÊï∞ÊçÆ„ÄÇ
        """,
        "data_analysis_pca_biplot_caption": "ËÆ≠ÁªÉÊï∞ÊçÆ‰∏≠ÊåâÁ±ªÂà´ÁùÄËâ≤ÁöÑ PCA ÂèåÊ†áÂõæ (PC1 vs PC2)„ÄÇ",
        "data_analysis_geochem_ratios_header": "4. ÁªèÂÖ∏Âú∞ÁêÉÂåñÂ≠¶ÊØîÁéáÂõæ",
        "data_analysis_geochem_ratio1_desc": "**K‚ÇÇO/Na‚ÇÇO vs SiO‚ÇÇ Âõæ (ËÆ≠ÁªÉÊï∞ÊçÆ):**",
        "data_analysis_geochem_ratio1_caption": "ËÆ≠ÁªÉÊ†∑Êú¨ÁöÑ K‚ÇÇO/Na‚ÇÇO vs SiO‚ÇÇ Âõæ„ÄÇ",
        "data_analysis_geochem_ratio2_desc": "**Sr/Y vs Y Âõæ (ËÆ≠ÁªÉÊï∞ÊçÆ):**",
        "data_analysis_geochem_ratio2_caption": "ËÆ≠ÁªÉÊ†∑Êú¨ÁöÑ Sr/Y vs Y Âõæ„ÄÇ",
        "data_analysis_plot_quality_notice": "ÊâÄÊúâÂõæË°®ÂùáÈááÁî®‰∏ÄËá¥ÁöÑÂ≠ó‰ΩìÂíåË∞ÉËâ≤ÊùøÁîüÊàêÔºåÂπ∂ÂäõÊ±ÇËææÂà∞ ‚â• 300 dpi ÁöÑÂàÜËæ®Áéá„ÄÇÊØè‰∏™ÂõæÈÉΩÂåÖÂê´Ê†áÈ¢ò„ÄÅËΩ¥Ê†áÁ≠æÂíåÂõæ‰æãÔºàÂ¶ÇÈÄÇÁî®Ôºâ„ÄÇ",

        # run_prediction.py
        "run_pred_title": "ÂØπÊñ∞Êï∞ÊçÆËøêË°åÈ¢ÑÊµã",
        "controls_header": "ÊéßÂà∂Èù¢Êùø",
        "run_pred_page_intro": "‰∏ä‰º†ÊÇ®ÁöÑÂú∞ÁêÉÂåñÂ≠¶Êï∞ÊçÆÔºåÈÄâÊã©Ê®°ÂûãÔºåÂπ∂Ëé∑ÂèñÂØåÈìúÊàñÂØåÈáëÊ†∑Êú¨ÁöÑÈ¢ÑÊµãÁªìÊûú„ÄÇ",
        "run_pred_upload_header": "1. ‰∏ä‰º†ÊÇ®ÁöÑÊï∞ÊçÆ",
        "run_pred_upload_label_sidebar": "‰∏ä‰º† Excel (.xlsx) Êàñ CSV (.csv) Êñá‰ª∂:",
        "run_pred_model_header": "2. ÈÄâÊã©Ê®°Âûã",
        "run_pred_model_label_sidebar": "ÈÄâÊã©‰∏Ä‰∏™È¢ÑËÆ≠ÁªÉÊ®°Âûã:",
        "run_pred_error_model_load_sidebar": "Ê®°Âûã {model_name} Êó†Ê≥ïÂä†ËΩΩ„ÄÇ",
        "run_pred_success_model_ready_sidebar": "{model_name} Ê®°ÂûãÂ∑≤ÂáÜÂ§áÂ∞±Áª™„ÄÇ",
        "run_pred_awaiting_upload": "Á≠âÂæÖÂú®‰æßËæπÊ†è‰∏ä‰º†Êï∞ÊçÆÊñá‰ª∂...",
        "run_pred_error_loading_data": "Âä†ËΩΩ‰∏ä‰º†Êñá‰ª∂Êó∂Âá∫Èîô„ÄÇ",
        "run_pred_true_label_header": "3. (ÂèØÈÄâ) ÊåáÂÆöÁúüÂÆûÊ†áÁ≠æÂàó",
        "run_pred_true_label_checkbox": "ÊàëÁöÑÊï∞ÊçÆÂåÖÂê´Áî®‰∫éÊÄßËÉΩËØÑ‰º∞ÁöÑÁúüÂÆûÊ†áÁ≠æÂàó„ÄÇ",
        "run_pred_true_label_select": "ÈÄâÊã©ÂåÖÂê´ÁúüÂÆûÊ†áÁ≠æÁöÑÂàó:",
        "run_pred_true_label_none": "Êó† (‰∏çËøõË°åÊÄßËÉΩËØÑ‰º∞)",
        "run_pred_true_label_help": "Â¶ÇÊûúÂèØÁî®ÔºåÊ≠§ÂàóÂ∞ÜÁî®‰∫éÊÄßËÉΩÊåáÊ†áËØÑ‰º∞„ÄÇ", 
        "run_pred_warning_no_label_col": "Êó†Ê≥ïÂú®‰∏ä‰º†ÁöÑÊï∞ÊçÆ‰∏≠ËØÜÂà´Âá∫ÊΩúÂú®ÁöÑÊ†áÁ≠æÂàó„ÄÇ", 
        "run_pred_validation_header": "2. Êï∞ÊçÆÈ™åËØÅ‰∏éÈ¢ÑÂ§ÑÁêÜ", 
        "run_pred_error_validation_failed": "È™åËØÅÂ§±Ë¥•: {message}", 
        "run_pred_success_validation": "{message}", 
        "run_pred_spinner_preprocessing": "Ê≠£Âú®È¢ÑÂ§ÑÁêÜÊï∞ÊçÆ...", 
        "run_pred_success_preprocessing_done": "Êï∞ÊçÆÂ∑≤ÊàêÂäüÈ¢ÑÂ§ÑÁêÜ‰ª•‰æõÈ¢ÑÊµã„ÄÇ", 
        "run_pred_expander_processed_data": "Êü•ÁúãÂ∑≤Â§ÑÁêÜÊï∞ÊçÆ (Ââç5Ë°å)", 
        "run_pred_run_prediction_header": "3. ÊâßË°åÈ¢ÑÊµã", 
        "run_pred_submit_button_main": "‰ΩøÁî® {model_name} ËøõË°åÈ¢ÑÊµã", 
        "run_pred_input_data_header": "Â∑≤‰∏ä‰º†Êï∞ÊçÆÈ¢ÑËßà (Ââç5Ë°å):",
        "run_pred_no_data_warning": "ËØ∑‰∏ä‰º†Êï∞ÊçÆÊñá‰ª∂‰ª•ÁªßÁª≠„ÄÇ",
        "run_pred_processing_spinner": "Ê≠£Âú®Â§ÑÁêÜÊï∞ÊçÆÂπ∂ËøõË°åÈ¢ÑÊµã...",
        "results_col_predicted_class": "È¢ÑÊµãÁ±ªÂà´", 
        "results_col_probability_cu_rich": "È¢ÑÊµãÊ¶ÇÁéá ({class_name_cu_rich})", 
        "run_pred_summary_cu_label": "È¢ÑÊµã‰∏∫ {class_name_cu_rich} ÁöÑÊ†∑Êú¨Êï∞", 
        "run_pred_summary_au_label": "È¢ÑÊµã‰∏∫ {class_name_au_rich} ÁöÑÊ†∑Êú¨Êï∞", 
        "run_pred_success_prediction_done": "È¢ÑÊµãÂÆåÊàêÔºÅÁªìÊûúÂ¶Ç‰∏äÊâÄÁ§∫ÔºåÂπ∂ÂèØ‰æõ‰∏ãËΩΩ„ÄÇ", 
        "run_pred_error_prediction_failed_internal": "È¢ÑÊµãËøáÁ®ãÂÜÖÈÉ®Â§±Ë¥•„ÄÇÊ®°ÂûãÂèØËÉΩ‰∏çÂÖºÂÆπÊàñÊï∞ÊçÆÂ≠òÂú®ÈóÆÈ¢ò„ÄÇ", 
        "run_pred_error_runtime_prediction": "È¢ÑÊµãËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {error_message}", 
        "run_pred_error_unexpected": "ÂèëÁîüÊÑèÂ§ñÈîôËØØ: {error_message}", 
        "run_pred_error_preprocessing_failed": "Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜÂ§±Ë¥•„ÄÇËØ∑Ê£ÄÊü•Êï∞ÊçÆÂÖºÂÆπÊÄß„ÄÇ", 
        "run_pred_results_header": "È¢ÑÊµãÁªìÊûú",
        "run_pred_download_button": "‰∏ãËΩΩÈ¢ÑÊµãÁªìÊûú‰∏∫ CSV",
        "run_pred_summary_header": "È¢ÑÊµãÊëòË¶Å:",
        "run_pred_summary_cu": "È¢ÑÊµãÂØåÈìúÊ†∑Êú¨Êï∞:",
        "run_pred_summary_au": "È¢ÑÊµãÂØåÈáëÊ†∑Êú¨Êï∞:",
        "run_pred_error_preprocessor_load": "ÂÖ≥ÈîÆÈîôËØØ: È¢ÑÂ§ÑÁêÜÂô®Êó†Ê≥ïÂä†ËΩΩ„ÄÇÊó†Ê≥ïËøõË°åÈ¢ÑÊµã„ÄÇ",
        "run_pred_error_file_processing": "Â§ÑÁêÜ‰∏ä‰º†Êñá‰ª∂Êó∂Âá∫Èîô„ÄÇËØ∑Á°Æ‰øùÊòØÊúâÊïàÁöÑ CSV Êàñ Excel Êñá‰ª∂„ÄÇ",
        "run_pred_error_missing_columns": "ÈîôËØØÔºö‰∏ä‰º†ÁöÑÊï∞ÊçÆÁº∫Â∞ë‰∏Ä‰∏™ÊàñÂ§ö‰∏™ÂøÖÈúÄÁöÑÂàó„ÄÇËØ∑Êü•Áúã‚ÄúÂ∏ÆÂä©/ÂÖ≥‰∫é‚ÄùÈ°µÈù¢‰∫ÜËß£ÊâÄÈúÄÁöÑÁâπÂæÅÂàóË°®„ÄÇ",
        "run_pred_error_prediction": "È¢ÑÊµãËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ„ÄÇ",
        "run_pred_success": "È¢ÑÊµãÊàêÂäüÔºÅ",
        "run_pred_success_intro": "È¢ÑÊµãÂ∑≤ÊàêÂäüÂÆåÊàê„ÄÇ‰ª•‰∏ãÊòØÊÇ®ÁöÑÊï∞ÊçÆÁöÑÈ¢ÑÊµãÁªìÊûú„ÄÇÊÇ®ÂèØ‰ª•‰∏ãËΩΩÁªìÊûúÊñá‰ª∂‰ª•ËøõË°åËøõ‰∏ÄÊ≠•ÂàÜÊûê„ÄÇ",



        # performance_visualizer.py
       "perf_viz_title": "Ê®°ÂûãÊÄßËÉΩÂèØËßÜÂåñÂ∑•ÂÖ∑",
        "perf_viz_no_predictions_warning": "Êú™ÊâæÂà∞È¢ÑÊµãÁªìÊûú„ÄÇËØ∑ÂÖàÂú®‚ÄúÊâßË°åÈ¢ÑÊµã‚ÄùÈ°µÈù¢ËøêË°åÈ¢ÑÊµã„ÄÇ",
        "perf_viz_no_true_label_info": "Ë¶ÅÂèØËßÜÂåñÊÄßËÉΩÔºåËØ∑Á°Æ‰øùÊÇ®‰∏ä‰º†ÁöÑÊñá‰ª∂ÂåÖÂê´‚ÄúÁúüÂÆûÊ†áÁ≠æ‚ÄùÂàóÔºåÂπ∂Âú®‚ÄúÊâßË°åÈ¢ÑÊµã‚ÄùÈ°µÈù¢ÈÄâÊã©‰∫ÜËØ•Âàó„ÄÇ",
        "perf_viz_raw_data_missing_error": "‰ºöËØù‰∏≠Áº∫Â∞ëÂ∏¶Ê†áÁ≠æÁöÑÂéüÂßãÊï∞ÊçÆ„ÄÇËØ∑ÈáçÊñ∞ËøêË°åÈ¢ÑÊµãÂπ∂ÊåáÂÆöÁúüÂÆûÊ†áÁ≠æ„ÄÇ",
        "perf_viz_true_label_not_found_error": "Âú®‰∏ä‰º†ÁöÑÊï∞ÊçÆ‰∏≠Êú™ÊâæÂà∞ÊåáÂÆöÁöÑÁúüÂÆûÊ†áÁ≠æÂàó '{true_label_col}'„ÄÇ",
        "perf_viz_class_names_error": "CLASS_NAMES ÈÖçÁΩÆÂØπ‰∫é‰∫åÂàÜÁ±ªÂèØËßÜÂåñÊó†Êïà„ÄÇ",
        "perf_viz_label_mapping_error": "Âàó '{true_label_col}' ‰∏≠ÁöÑÊüê‰∫õÁúüÂÆûÊ†áÁ≠æ ({unmapped_labels}) Êó†Ê≥ïÊò†Â∞Ñ„ÄÇËØ∑Á°Æ‰øùÊ†áÁ≠æ‰∏∫ {class_names_list} ‰∏≠ÁöÑ‰∏Ä‰∏™„ÄÇ",
        "perf_viz_true_label_mapping_key_error": "Êò†Â∞ÑÁúüÂÆûÊ†áÁ≠æÊó∂Âá∫Èîô„ÄÇËØ∑Á°Æ‰øùÂàó '{true_label_col}' ‰∏≠ÁöÑÊ†áÁ≠æ‰∏∫ {class_names_list} ‰∏≠ÁöÑ‰∏Ä‰∏™„ÄÇ",
        "perf_viz_predicted_class_col_missing": "Âú®È¢ÑÊµãÁªìÊûú‰∏≠Êú™ÊâæÂà∞ '{col_name}' Âàó„ÄÇ",
        "perf_viz_probability_col_missing": "Âú®È¢ÑÊµãÁªìÊûú‰∏≠Êú™ÊâæÂà∞ '{col_name}' Âàó„ÄÇ",
        "perf_viz_pred_label_processing_error": "Â§ÑÁêÜÁî®‰∫éÊÄßËÉΩÊåáÊ†áÁöÑÈ¢ÑÊµãÁ±ªÂà´Êó∂Âá∫Èîô„ÄÇ",
        "perf_viz_metrics_subheader": "ÊÄßËÉΩÊåáÊ†á",
        "perf_viz_accuracy_label": "ÂáÜÁ°ÆÁéá",
        "perf_viz_precision_label": "Á≤æÁ°ÆÁéá ({class_name})",
        "perf_viz_recall_label": "Âè¨ÂõûÁéá ({class_name})",
        "perf_viz_f1_label": "F1ÂàÜÊï∞ ({class_name})",
        "perf_viz_visualizations_subheader": "ÂèØËßÜÂåñÂõæË°®",
        "perf_viz_cm_tab": "Ê∑∑Ê∑ÜÁü©Èòµ",
        "perf_viz_roc_tab": "ROCÊõ≤Á∫ø",
        "perf_viz_pr_tab": "Á≤æÁ°ÆÁéá-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "perf_viz_cm_title_markdown": "#### Ê∑∑Ê∑ÜÁü©Èòµ",
        "perf_viz_cm_caption": """
            ÊòæÁ§∫ÂàÜÁ±ªÊ®°ÂûãÁöÑÊÄßËÉΩ„ÄÇ
            Ë°å‰ª£Ë°®ÂÆûÈôÖÁ±ªÂà´ÔºåÂàó‰ª£Ë°®È¢ÑÊµãÁ±ªÂà´„ÄÇ
            - **{class_name_1}**: ÂØåÈìúÊñëÂ≤©Ê†∑ÂìÅ„ÄÇ
            - **{class_name_0}**: ÂØåÈáëÊñëÂ≤©Ê†∑ÂìÅ„ÄÇ
        """,
        "perf_viz_roc_title_markdown": "#### ROCÊõ≤Á∫ø",
        "perf_viz_selected_model_placeholder": "ÊâÄÈÄâÊ®°Âûã",
        "perf_viz_roc_caption": """
            Êé•Êî∂ËÄÖÊìç‰ΩúÁâπÂæÅÔºàROCÔºâÊõ≤Á∫øËØ¥Êòé‰∫ÜÂàÜÁ±ªÂô®Âú®ÂÖ∂Âà§Âà´ÈòàÂÄºÂèòÂåñÊó∂ÁöÑËØäÊñ≠ËÉΩÂäõ„ÄÇ
            Êõ≤Á∫ø‰∏ãÈù¢ÁßØÔºàAUCÔºâË°°ÈáèÁöÑÊòØ‰ªéÔºà0,0ÔºâÂà∞Ôºà1,1ÔºâÊï¥‰∏™ROCÊõ≤Á∫ø‰∏ãÊñπÁöÑÊï¥‰∏™‰∫åÁª¥Âå∫Âüü„ÄÇ
            ‰∏Ä‰∏™100%ÂáÜÁ°ÆÁöÑÊ®°ÂûãÂÖ∂AUC‰∏∫1.0„ÄÇ
        """,
        "perf_viz_pr_title_markdown": "#### Á≤æÁ°ÆÁéá-Âè¨ÂõûÁéáÊõ≤Á∫ø",
        "perf_viz_pr_caption": """
            Á≤æÁ°ÆÁéá-Âè¨ÂõûÁéáÊõ≤Á∫øÊòæÁ§∫‰∫Ü‰∏çÂêåÈòàÂÄº‰∏ãÁ≤æÁ°ÆÁéáÂíåÂè¨ÂõûÁéá‰πãÈó¥ÁöÑÊùÉË°°„ÄÇ
            Êõ≤Á∫ø‰∏ãËæÉÂ§ßÁöÑÈù¢ÁßØ‰ª£Ë°®È´òÁ≤æÁ°ÆÁéáÂíåÈ´òÂè¨ÂõûÁéá„ÄÇ
            APÔºàÂπ≥ÂùáÁ≤æÁ°ÆÁéáÔºâÊ¶ÇÊã¨‰∫ÜÊ≠§Êõ≤Á∫ø„ÄÇ
        """,

        # model_insights.py
        "model_insights_title": "Ê®°ÂûãÂèØËß£ÈáäÊÄßÊ¥ûÂØü",
        "model_insights_intro": """
        Êú¨ÈÉ®ÂàÜÊèê‰æõ‰∫ÜÂÖ≥‰∫éÊ®°ÂûãËÆ§‰∏∫Âì™‰∫õÁâπÂæÅÈáçË¶ÅÁöÑËßÅËß£„ÄÇ
        Áî±‰∫éÂÆûÊó∂Â∫îÁî®‰∏≠ÁöÑËÆ°ÁÆóÈôêÂà∂ÔºåSHAPÂõæÈÄöÂ∏∏ÊòæÁ§∫‰∏∫Ê®°ÂûãËÆ≠ÁªÉÈò∂ÊÆµÈ¢ÑÂÖàÁîüÊàêÁöÑÈùôÊÄÅÂõæÂÉè„ÄÇ
        Âü∫‰∫éÊ†ëÁöÑÊ®°ÂûãÂíåÁ∫øÊÄßSVMÁöÑÁâπÂæÅÈáçË¶ÅÊÄßÊòØÊ†πÊçÆÊâÄÈÄâÁöÑÈ¢ÑËÆ≠ÁªÉÊ®°ÂûãÁîüÊàêÁöÑ„ÄÇ
        """,
        "model_insights_model_select_label": "ÈÄâÊã©‰∏Ä‰∏™Ê®°Âûã‰ª•Êü•ÁúãÊ¥ûÂØü:",
        "model_insights_subheader_for_model": "ÈíàÂØπÊ®°Âûã: {model_name} ÁöÑÊ¥ûÂØü",
        "model_insights_fi_header": "#### ÁâπÂæÅÈáçË¶ÅÊÄß",
        "model_insights_fi_warning_feature_names": "Êó†Ê≥ïÂèØÈù†Âú∞Á°ÆÂÆöËΩ¨Êç¢ÂêéÁöÑÁâπÂæÅÂêçÁß∞Ôºõ‰ΩøÁî®ÂéüÂßãÂêçÁß∞„ÄÇÈîôËØØ: {error_message}",
        "model_insights_fi_plot_caption": "Êù°ÂΩ¢ÂõæÊòæÁ§∫‰∫ÜÊâÄÈÄâÊ®°ÂûãÁâπÂæÅÁöÑÁõ∏ÂØπÈáçË¶ÅÊÄß„ÄÇÂæóÂàÜË∂äÈ´òË°®Á§∫ÂΩ±ÂìçË∂äÂ§ß„ÄÇ",
        "model_insights_fi_plot_error": "Êó†Ê≥ï‰∏∫Ê≠§Ê®°ÂûãÁ±ªÂûã/ÈÖçÁΩÆÁªòÂà∂ÁâπÂæÅÈáçË¶ÅÊÄßÂõæ„ÄÇ",
        "model_insights_fi_svm_info": "SVMÁöÑÁâπÂæÅÈáçË¶ÅÊÄßÈÄöÂ∏∏ÈÄöËøáÁ∫øÊÄßÊ†∏ÁöÑÁ≥ªÊï∞Êù•ÊòæÁ§∫„ÄÇ",
        "model_insights_fi_unavailable_info": "Ê≠§Â∫îÁî®‰∏≠Êó†Ê≥ïÁõ¥Êé•Ëé∑ÂèñÊàñËΩªÊòìÊèêÂèñ {model_name} ÁöÑÁâπÂæÅÈáçË¶ÅÊÄß„ÄÇ",
        "model_insights_fi_load_warning": "Êó†Ê≥ïÂä†ËΩΩÊ®°ÂûãÊàñÈ¢ÑÂ§ÑÁêÜÂô®‰ª•ÊòæÁ§∫ {model_name} ÁöÑÁâπÂæÅÈáçË¶ÅÊÄß„ÄÇ",
        "model_insights_fi_dnn_info": "Ê∑±Â∫¶Á•ûÁªèÁΩëÁªúÁöÑÁâπÂæÅÈáçË¶ÅÊÄßËæÉ‰∏∫Â§çÊùÇÔºåÈÄöÂ∏∏‰ΩøÁî®SHAPÁ≠âÊäÄÊúØËøõË°åÊé¢Á¥¢ÔºåÊ≠§Â§ÑÊòæÁ§∫ÁöÑÊòØÂü∫‰∫éËÆ≠ÁªÉÊï∞ÊçÆÁöÑÈùôÊÄÅÂõæ„ÄÇ",
        "model_insights_shap_summary_header": "#### SHAP ÊëòË¶ÅÂõæ (ËÆ≠ÁªÉÈò∂ÊÆµÁ§∫‰æã)",
        "model_insights_shap_summary_desc": """
        SHAP (SHapley Additive exPlanations) ÂÄºËß£Èáä‰∫ÜÊØè‰∏™ÁâπÂæÅÂØπÂçï‰∏™È¢ÑÊµãÁöÑÂΩ±Âìç„ÄÇ
        ‰∏ãÈù¢ÁöÑÊëòË¶ÅÂõæÊòØÊ®°ÂûãËÆ≠ÁªÉÈò∂ÊÆµÁöÑ‰∏Ä‰∏™Á§∫‰æãÔºåÊòæÁ§∫‰∫ÜÁâπÂæÅÈáçË¶ÅÊÄß‰ª•ÂèäÊØè‰∏™ÁâπÂæÅÁöÑSHAPÂÄºÂàÜÂ∏É„ÄÇ
        """,
        "model_insights_shap_summary_caption": "{model_name} ÁöÑSHAPÊëòË¶ÅÂõæ (Êù•Ëá™ËÆ≠ÁªÉÊï∞ÊçÆ)„ÄÇ",
        "model_insights_shap_image_load_warning": "Êó†Ê≥ïÂä†ËΩΩSHAP {image_type} ÂõæÂÉè: {error_message}",
        "model_insights_shap_image_not_found": "Âú® '{image_path}' Êú™ÊâæÂà∞ {model_name} ÁöÑÈ¢ÑÁîüÊàêSHAP {image_type} Âõæ„ÄÇ",
        "model_insights_shap_dependence_header": "#### SHAP ‰æùËµñÂõæ (ËÆ≠ÁªÉÈò∂ÊÆµÁ§∫‰æã)",
        "model_insights_shap_dependence_desc": """
        SHAP‰æùËµñÂõæÊòæÁ§∫Âçï‰∏™ÁâπÂæÅÂÄºÂ¶Ç‰ΩïÂΩ±ÂìçSHAPÂÄºÔºà‰ªéËÄåÂΩ±ÂìçÈ¢ÑÊµãÔºâÔºå
        ÂèØËÉΩÁ™ÅÂá∫ÊòæÁ§∫‰∏éÂÖ∂‰ªñÁâπÂæÅÁöÑ‰∫§‰∫í‰ΩúÁî®„ÄÇËøô‰∫õÊòØËÆ≠ÁªÉÈò∂ÊÆµÁöÑÁ§∫‰æã„ÄÇ
        """,
        "model_insights_shap_dependence_caption": "{feature_name} ({model_name}) ÁöÑSHAP‰æùËµñÂõæ (Êù•Ëá™ËÆ≠ÁªÉÊï∞ÊçÆ)„ÄÇ",
        "model_insights_shap_dependence_config_missing": "{model_name} ÁöÑSHAP‰æùËµñÂõæÈÖçÁΩÆ‰∏çÂèØÁî®„ÄÇ",
        "model_insights_geological_meaning_header": "ÈáçË¶ÅÂèòÈáèÁöÑÂú∞Ë¥®ÊÑè‰πâ (ËÆ®ËÆ∫)",
        "model_insights_geological_meaning_desc": """
        *ÔºàÊú¨ÈÉ®ÂàÜÂ∫îÂ°´ÂÜôÊÇ®ÂØπ5-10‰∏™ÊúÄÂÖ∑ÂΩ±ÂìçÂäõÁöÑÂèòÈáèÂèäÂÖ∂Âú∞Ë¥®ÊÑè‰πâÁöÑËÆ®ËÆ∫Ôºå
        Âü∫‰∫éÊÇ®È°πÁõÆÁöÑÂèØËß£ÈáäÊÄßÂàÜÊûê„ÄÇÔºâ*

        ‰æãÂ¶Ç:
        * **SiO‚ÇÇ (‰∫åÊ∞ßÂåñÁ°Ö):**ËæÉÈ´òÁöÑ‰∫åÊ∞ßÂåñÁ°ÖÂê´ÈáèÈÄöÂ∏∏‰∏éÊõ¥ÈïøËã±Ë¥®ÁöÑÂ≤©ÊµÜÁõ∏ÂÖ≥ÔºåËøôÂèØËÉΩ‰∏éÊüê‰∫õÁ±ªÂûãÁöÑÊñëÂ≤©ÁüøÂ∫äÊúâÂÖ≥...
        * **Cu/Au ÊØîÂÄº (Â¶ÇÊûúÁªèËøáÁâπÂæÅÂ∑•Á®ã):** ËøôÁõ¥Êé•‰∏∫ÂàÜÁ±ªÊèê‰æõ‰∫Ü‰ø°ÊÅØ...
        * **K‚ÇÇO/Na‚ÇÇO:** ÊåáÁ§∫Á¢±Â∫¶ÔºåÂú®Â≤©ÊµÜÊºîÂåñÂíåÊàêÁüø‰ΩúÁî®‰∏≠Ëµ∑‰ΩúÁî®...
        * **Sr/Y ÊØîÂÄº:** ÂèØ‰ª•ÊòØÊùøÁâáÁÜîËûçÂèÇ‰∏éÊàñÂú∞Â£≥ÂéöÂ∫¶ÁöÑÊåáÊ†á...
        """,

        # help_about.py
        "help_about_title": "Â∏ÆÂä© / ÂÖ≥‰∫éÊ≠§Â∑•ÂÖ∑",
        "help_about_usage_header": "‰ΩøÁî®ËØ¥Êòé",
        "help_about_usage_content": """
    1.  **ÂØºËà™Ëá≥‚ÄúÊâßË°åÈ¢ÑÊµã‚Äù**Ôºö‰ΩøÁî®‰æßËæπÊ†èËΩ¨Âà∞È¢ÑÊµãÈ°µÈù¢„ÄÇ
    2.  **‰∏ä‰º†Êï∞ÊçÆ**Ôºö
        * ÁÇπÂáª‚ÄúÊµèËßàÊñá‰ª∂‚Äù‰∏ä‰º†ÊÇ®ÁöÑÊ†∑Êú¨Êï∞ÊçÆ„ÄÇ
        * Êñá‰ª∂ÂøÖÈ°ª‰∏∫ `.csv` Êàñ `.xlsx` Ê†ºÂºè„ÄÇ
        * Á°Æ‰øùÊÇ®ÁöÑÊï∞ÊçÆÂåÖÂê´36‰∏™ÂøÖÈúÄÁöÑÂú∞ÁêÉÂåñÂ≠¶ÁâπÂæÅÔºàÂèÇËßÅ‰∏ãÊñπÁöÑ‚ÄúÁâπÂæÅÊèèËø∞‚ÄùÔºâ„ÄÇÂàóÂêçÂ∫îÂåπÈÖç„ÄÇ
        * È°πÁõÆÁöÑ `assets/` ÁõÆÂΩï‰∏≠Êèê‰æõ‰∫Ü‰∏Ä‰∏™ `sample_data.csv` Êñá‰ª∂‰ª•‰æõÂèÇËÄÉ„ÄÇ
    3.  **ÈÄâÊã©Ê®°Âûã**Ôºö‰ªé‰æßËæπÊ†èÈÄâÊã©‰∏Ä‰∏™È¢ÑËÆ≠ÁªÉÊ®°ÂûãÔºàÈöèÊú∫Ê£ÆÊûó„ÄÅXGBoost„ÄÅÊîØÊåÅÂêëÈáèÊú∫„ÄÅDNN-KerasÔºâ„ÄÇ
    4.  **ËøêË°åÈ¢ÑÊµã**Ôºö
        * Â¶ÇÊûúÊÇ®ÁöÑÊï∞ÊçÆÂåÖÂê´Â∏¶ÊúâÁúüÂÆûÊ†áÁ≠æÁöÑÂàóÔºà‰æãÂ¶ÇÔºå‚ÄúActual_Class‚ÄùÔºâÔºåÊÇ®ÂèØ‰ª•ÂãæÈÄâ‚ÄúÊàëÁöÑÊï∞ÊçÆÂåÖÂê´‚ÄòÁúüÂÆûÊ†áÁ≠æ‚ÄôÂàó...‚ÄùÂ§çÈÄâÊ°ÜÂπ∂ÈÄâÊã©ËØ•Âàó„ÄÇËøôÂ∞ÜÂêØÁî®ÊÄßËÉΩÂèØËßÜÂåñ„ÄÇ
        * ÁÇπÂáª‚Äú‰ΩøÁî®[ÊâÄÈÄâÊ®°Âûã]ËøõË°åÈ¢ÑÊµã‚ÄùÊåâÈíÆ„ÄÇ
    5.  **Êü•ÁúãÁªìÊûú**ÔºöÈ¢ÑÊµãÂíåÊ¶ÇÁéáÂ∞ÜÊòæÁ§∫Âú®Ë°®Ê†º‰∏≠„ÄÇÊÇ®ÂèØ‰ª•Â∞ÜËøô‰∫õÁªìÊûú‰∏ãËΩΩ‰∏∫CSVÊñá‰ª∂„ÄÇ
    6.  **ÂèØËßÜÂåñÊÄßËÉΩÔºàÂèØÈÄâÔºâ**ÔºöÂ¶ÇÊûúÊÇ®Êèê‰æõ‰∫ÜÁúüÂÆûÊ†áÁ≠æÂàóÔºåËØ∑ÂØºËà™Ëá≥‚ÄúÊÄßËÉΩÂèØËßÜÂåñÂ∑•ÂÖ∑‚ÄùÈ°µÈù¢Êü•ÁúãÊâÄÂÅöÈ¢ÑÊµãÁöÑÊ∑∑Ê∑ÜÁü©ÈòµÂíåROCÊõ≤Á∫ø„ÄÇ
    7.  **Êé¢Á¥¢Ê®°ÂûãÊ¥ûÂØü**ÔºöÂØºËà™Ëá≥‚ÄúÊ®°ÂûãÊ¥ûÂØü‚ÄùÈ°µÈù¢Êü•ÁúãÁâπÂæÅÈáçË¶ÅÊÄßÔºàÊüê‰∫õÊ®°ÂûãÔºâÂíåÁ§∫‰æãSHAPÂõæÔºàÊù•Ëá™ËÆ≠ÁªÉÁöÑÈùôÊÄÅÂõæÂÉèÔºâ„ÄÇ
    """,
        "help_about_features_header": "ÁâπÂæÅÊèèËø∞ (ËæìÂÖ•Êï∞ÊçÆË¶ÅÊ±Ç)",
        "help_about_features_content": """
    ÊÇ®ÁöÑËæìÂÖ•Êï∞ÊçÆÂøÖÈ°ªÂåÖÂê´‰ª•‰∏ã36‰∏™‰∏ªÈáèÂíåÂæÆÈáèÂÖÉÁ¥†ÁâπÂæÅÔºö
    * **‰∏ªÈáèÂÖÉÁ¥† (wt %):** SiO‚ÇÇ, TiO‚ÇÇ, Al‚ÇÇO‚ÇÉ, TFe‚ÇÇO‚ÇÉ, MnO, MgO, CaO, Na‚ÇÇO, K‚ÇÇO, P‚ÇÇO‚ÇÖ
    * **ÂæÆÈáèÂÖÉÁ¥† (ppm):** Rb, Sr, Y, Zr, Nb, Ba, La, Ce, Pr, Nd, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, Th, U
    * Ëøô‰∫õÁâπÂæÅ‰∏≠ÁöÑÁº∫Â§±ÂÄºÂ∞ÜÂú®Ëøõ‰∏ÄÊ≠•Â§ÑÁêÜÂâçÁî®Èõ∂Â°´ÂÖÖÔºàÊ†πÊçÆÈ°πÁõÆCLRÂ§ÑÁêÜÊñπÂºèÔºâ„ÄÇ
    """,
        "help_about_model_info_header": "Ê®°Âûã‰ø°ÊÅØ",
        "help_about_model_info_content": """
    Ê≠§Â∑•ÂÖ∑‰ΩøÁî®ÂõõÁßçÁ±ªÂûãÁöÑÈ¢ÑËÆ≠ÁªÉÊú∫Âô®Â≠¶‰π†Ê®°ÂûãÔºö
    * **ÈöèÊú∫Ê£ÆÊûó:** ‰∏ÄÁßç‰ΩøÁî®Â§ö‰∏™ÂÜ≥Á≠ñÊ†ëÁöÑÈõÜÊàêÂ≠¶‰π†ÊñπÊ≥ï„ÄÇ
    * **XGBoost:** ‰∏ÄÁßçÊ¢ØÂ∫¶ÊèêÂçáÊ°ÜÊû∂Ôºå‰ª•È´òÊÄßËÉΩËëóÁß∞„ÄÇ
    * **SVM (ÊîØÊåÅÂêëÈáèÊú∫):** ‰∏ÄÁßçÈÄöËøáÊâæÂà∞ÊúÄ‰ºòË∂ÖÂπ≥Èù¢Êù•ÂàÜÁ¶ªÁ±ªÂà´ÁöÑÂàÜÁ±ªÂô®„ÄÇ
    * **DNN-Keras:** ‰∏Ä‰∏™‰ΩøÁî®Keras APIÊûÑÂª∫ÁöÑÊ∑±Â∫¶Á•ûÁªèÁΩëÁªú„ÄÇ
    ÊØè‰∏™Ê®°ÂûãÈÉΩ‰ΩøÁî® "2025-Project-Data.xlsx" Êï∞ÊçÆÈõÜËøõË°åËÆ≠ÁªÉ„ÄÇ
    """,
        "help_about_tech_stack_header": "Â∫ìÁâàÊú¨ÂíåÊäÄÊúØÊ†à",
        "help_about_tech_stack_intro": "Ê≠§Â∫îÁî®Á®ãÂ∫è‰ΩøÁî®PythonÊûÑÂª∫ÔºåÂπ∂‰æùËµñ‰∫éÂá†‰∏™ÂÖ≥ÈîÆÂ∫ìÔºö",
        "help_about_tech_stack_caption": "Ë¶ÅËé∑ÂèñÁ°ÆÂàáÁâàÊú¨ÔºåÊÇ®ÈÄöÂ∏∏ÂèØ‰ª•Âú®È°πÁõÆÁöÑËôöÊãüÁéØÂ¢É‰∏≠‰ΩøÁî® `pip freeze > requirements.txt` Âπ∂Âú®Ê≠§Â§ÑÂàóÂá∫ÂÖ≥ÈîÆÁâàÊú¨„ÄÇ",
        "help_about_project_ack_header": "È°πÁõÆ‰∏éËá¥Ë∞¢",
        "help_about_project_ack_content": """
    * Ê≠§Â∑•ÂÖ∑ÊòØ‰Ωú‰∏∫‚ÄúÊï∞ÊçÆÁßëÂ≠¶ÈÄöÁî®Â∑•ÂÖ∑‚ÄùÊúÄÁªàÈ°πÁõÆÁöÑ‰∏ÄÈÉ®ÂàÜÂºÄÂèëÁöÑ„ÄÇ
    * **Âõ¢Èòü:** [ÊÇ®ÁöÑÂõ¢ÈòüÂêçÁß∞ÊàñÁªÑÂè∑: ‰æãÂ¶Ç, 2025GXX-È°πÁõÆÂêçÁß∞]
        * [Âõ¢ÈòüÊàêÂëò 1]
        * [Âõ¢ÈòüÊàêÂëò 2]
        * [Âõ¢ÈòüÊàêÂëò 3]
        * [Âõ¢ÈòüÊàêÂëò 4 (Âèä5ÔºåÂ¶ÇÈÄÇÁî®)]
    * **Êï∞ÊçÆÈõÜ:** "2025-Project-Data.xlsx" (ËØæÁ®ãÊèê‰æõ)„ÄÇ
    * **GUIÁªìÊûÑÁÅµÊÑüÊù•Ê∫ê:** Mitch Parker ÁöÑ `rascore.streamlit.app`„ÄÇ
    """,
        "help_about_contact_info": "Â¶ÇÊúâÈóÆÈ¢òÊàñÁñëÈóÆÔºåËØ∑ÂèÇÈòÖÈ°πÁõÆÊñáÊ°£ÊàñËÅîÁ≥ªÂºÄÂèëÂõ¢Èòü„ÄÇ",

    # core/data_handler.py messages
        "data_handler_unsupported_file_type": "‰∏çÊîØÊåÅÁöÑÊñá‰ª∂Á±ªÂûã„ÄÇËØ∑‰∏ä‰º†CSVÊàñExcelÊñá‰ª∂„ÄÇ",
        "data_handler_error_loading_data": "Âä†ËΩΩÊï∞ÊçÆÊó∂Âá∫Èîô: {error_message}",
        "data_handler_validation_no_data": "Ê≤°ÊúâÂä†ËΩΩÁî®‰∫éÈ™åËØÅÁöÑÊï∞ÊçÆ„ÄÇ",
        "data_handler_validation_missing_cols": "Áº∫Â∞ëÂøÖÈúÄÁöÑÂàó: {missing_cols_list}„ÄÇËØ∑Á°Æ‰øùÊÇ®ÁöÑÊñá‰ª∂ÂåÖÂê´ÊâÄÊúâ36‰∏™ÁâπÂæÅ„ÄÇ",
        "data_handler_validation_non_numeric": "Âàó '{column_name}' ÂåÖÂê´Êó†Ê≥ïËΩ¨Êç¢ÁöÑÈùûÊï∞Â≠óÊï∞ÊçÆ„ÄÇËØ∑Ê∏ÖÁêÜÊÇ®ÁöÑÊï∞ÊçÆ„ÄÇ",
        "data_handler_validation_success": "Êï∞ÊçÆÈ™åËØÅÊàêÂäü„ÄÇÁâπÂæÅÂ∑≤ÂáÜÂ§áÂ•ΩËøõË°åÈ¢ÑÂ§ÑÁêÜ„ÄÇ",
        "data_handler_error_preprocessing": "Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜËøáÁ®ã‰∏≠Âá∫Èîô: {error_message}",

    # core/model_loader.py messages
        "model_loader_file_not_found": "{model_name} Ê®°ÂûãÊñá‰ª∂Âú® {file_path} Êú™ÊâæÂà∞„ÄÇËØ∑Á°Æ‰øùÊ®°ÂûãÂ∑≤Ê≠£Á°ÆÊîæÁΩÆ„ÄÇ",
        "model_loader_dnn_not_implemented": "DNN-Keras Ê®°ÂûãÂä†ËΩΩÂ∞öÊú™Âú® model_loader.py ‰∏≠ÂÆåÂÖ®ÂÆûÁé∞„ÄÇ",
        "model_loader_invalid_model_name": "ÊâÄÈÄâÊ®°ÂûãÂêçÁß∞Êó†Êïà: {model_name}„ÄÇ",
        "model_loader_success_model_load": "{model_name} Ê®°ÂûãÂä†ËΩΩÊàêÂäü„ÄÇ",
        "model_loader_error_loading_model": "Âä†ËΩΩ {model_name} Ê®°ÂûãÊó∂Âá∫Èîô: {error_message}",
        "model_loader_preprocessor_not_found": "È¢ÑÂ§ÑÁêÜÂô®Êñá‰ª∂Âú® {file_path} Êú™ÊâæÂà∞„ÄÇËøôÂØπ‰∫éÈ¢ÑÊµãËá≥ÂÖ≥ÈáçË¶Å„ÄÇ",
        "model_loader_success_preprocessor_load": "È¢ÑÂ§ÑÁêÜÂô®Âä†ËΩΩÊàêÂäü„ÄÇ",
        "model_loader_error_loading_preprocessor": "Âä†ËΩΩÈ¢ÑÂ§ÑÁêÜÂô®Êó∂Âá∫Èîô: {error_message}",

    # core/predictor.py messages
        "predictor_unknown_model_type": "Êú™Áü•ÁöÑÈ¢ÑÊµãÊ®°ÂûãÁ±ªÂûã: {model_name}„ÄÇ",
        "predictor_dnn_invalid_model_type": "DNN-Keras Ê®°Âûã‰∏çÊòØ‰∏Ä‰∏™ÊúâÊïàÁöÑ Keras Ê®°ÂûãÂÆû‰æã„ÄÇ",

    # core/visualizer.py messages (plot labels and titles)
        "viz_font_warning": "ÁªòÂõæ‰∏≠ÁöÑ‰∏≠ÊñáÂ≠óÁ¨¶ÂèØËÉΩÊó†Ê≥ïÊ≠£Á°ÆÊòæÁ§∫„ÄÇËØ∑Á°Æ‰øùÂ∑≤ÂÆâË£ÖÂêàÈÄÇÁöÑÂ≠ó‰ΩìÔºà‰æãÂ¶ÇÔºöÈªë‰ΩìÔºâ„ÄÇ",
        "viz_cm_title": "Ê∑∑Ê∑ÜÁü©Èòµ",
        "viz_cm_xlabel": "È¢ÑÊµãÊ†áÁ≠æ",
        "viz_cm_ylabel": "ÁúüÂÆûÊ†áÁ≠æ",
        "viz_roc_label": "ROCÊõ≤Á∫ø (AUC = {auc_score})",
        "viz_roc_xlabel": "ÂÅáÈò≥ÊÄßÁéá",
        "viz_roc_ylabel": "ÁúüÈò≥ÊÄßÁéá",
        "viz_roc_title": "ÂèóËØïËÄÖÂ∑•‰ΩúÁâπÂæÅÊõ≤Á∫ø (ROC) - {model_name}",
        "viz_pr_label": "PRÊõ≤Á∫ø (AP = {ap_score})",
        "viz_pr_xlabel": "Âè¨ÂõûÁéá",
        "viz_pr_ylabel": "Á≤æÁ°ÆÁéá",
        "viz_pr_title": "Á≤æÁ°ÆÁéá-Âè¨ÂõûÁéáÊõ≤Á∫ø - {model_name}",
        "viz_fi_title": "Ââç {n_features} ‰∏™ÁâπÂæÅÈáçË¶ÅÊÄß - {model_name}",
        "viz_fi_xlabel": "ÈáçË¶ÅÊÄßÂæóÂàÜ",
        "viz_fi_ylabel": "ÁâπÂæÅ"
    }
}


# Helper function to get translated text
def T(key, **kwargs):
    """
    Retrieves a translated string for the given key and current language.
    kwargs can be used for simple string formatting.
    Example: T("welcome_user", name="John") where TEXTS has "welcome_user": "Welcome, {name}!"
    """
    lang = st.session_state.get("lang", "en") # Default to English if lang not set
    base_string = TEXTS.get(lang, {}).get(key, f"[{key}]_{lang}")
    if kwargs:
        try:
            return base_string.format(**kwargs)
        except KeyError: # In case a placeholder is in the string but not in kwargs
            return base_string # Return the raw string with placeholders
    return base_string